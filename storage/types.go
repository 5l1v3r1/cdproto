package storage

// AUTOGENERATED. DO NOT EDIT.

import (
	"errors"

	. "github.com/knq/chromedp/cdp"
	"github.com/mailru/easyjson"
	"github.com/mailru/easyjson/jlexer"
	"github.com/mailru/easyjson/jwriter"
)

var (
	_ BackendNode
	_ BackendNodeID
	_ ComputedProperty
	_ ErrorType
	_ Frame
	_ FrameID
	_ LoaderID
	_ Message
	_ MessageError
	_ MethodType
	_ Node
	_ NodeID
	_ NodeType
	_ PseudoType
	_ RGBA
	_ ShadowRootType
	_ Timestamp
)

// StorageType enum of possible storage types.
type StorageType string

// String returns the StorageType as string value.
func (t StorageType) String() string {
	return string(t)
}

// StorageType values.
const (
	StorageTypeAppcache       StorageType = "appcache"
	StorageTypeCookies        StorageType = "cookies"
	StorageTypeFileSystems    StorageType = "file_systems"
	StorageTypeIndexeddb      StorageType = "indexeddb"
	StorageTypeLocalStorage   StorageType = "local_storage"
	StorageTypeShaderCache    StorageType = "shader_cache"
	StorageTypeWebsql         StorageType = "websql"
	StorageTypeServiceWorkers StorageType = "service_workers"
	StorageTypeCacheStorage   StorageType = "cache_storage"
	StorageTypeAll            StorageType = "all"
)

// MarshalEasyJSON satisfies easyjson.Marshaler.
func (t StorageType) MarshalEasyJSON(out *jwriter.Writer) {
	out.String(string(t))
}

// MarshalJSON satisfies json.Marshaler.
func (t StorageType) MarshalJSON() ([]byte, error) {
	return easyjson.Marshal(t)
}

// UnmarshalEasyJSON satisfies easyjson.Unmarshaler.
func (t *StorageType) UnmarshalEasyJSON(in *jlexer.Lexer) {
	switch StorageType(in.String()) {
	case StorageTypeAppcache:
		*t = StorageTypeAppcache
	case StorageTypeCookies:
		*t = StorageTypeCookies
	case StorageTypeFileSystems:
		*t = StorageTypeFileSystems
	case StorageTypeIndexeddb:
		*t = StorageTypeIndexeddb
	case StorageTypeLocalStorage:
		*t = StorageTypeLocalStorage
	case StorageTypeShaderCache:
		*t = StorageTypeShaderCache
	case StorageTypeWebsql:
		*t = StorageTypeWebsql
	case StorageTypeServiceWorkers:
		*t = StorageTypeServiceWorkers
	case StorageTypeCacheStorage:
		*t = StorageTypeCacheStorage
	case StorageTypeAll:
		*t = StorageTypeAll

	default:
		in.AddError(errors.New("unknown StorageType value"))
	}
}

// UnmarshalJSON satisfies json.Unmarshaler.
func (t *StorageType) UnmarshalJSON(buf []byte) error {
	return easyjson.Unmarshal(buf, t)
}
