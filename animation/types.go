package animation

// AUTOGENERATED. DO NOT EDIT.

import (
	"errors"

	. "github.com/knq/chromedp/cdp"
	"github.com/mailru/easyjson"
	"github.com/mailru/easyjson/jlexer"
	"github.com/mailru/easyjson/jwriter"
)

var (
	_ BackendNode
	_ BackendNodeID
	_ ComputedProperty
	_ ErrorType
	_ Frame
	_ FrameID
	_ LoaderID
	_ Message
	_ MessageError
	_ MethodType
	_ Node
	_ NodeID
	_ NodeType
	_ PseudoType
	_ RGBA
	_ ShadowRootType
	_ Timestamp
)

// Animation animation instance.
type Animation struct {
	ID           string           `json:"id,omitempty"`           // Animation's id.
	Name         string           `json:"name,omitempty"`         // Animation's name.
	PausedState  bool             `json:"pausedState,omitempty"`  // Animation's internal paused state.
	PlayState    string           `json:"playState,omitempty"`    // Animation's play state.
	PlaybackRate float64          `json:"playbackRate,omitempty"` // Animation's playback rate.
	StartTime    float64          `json:"startTime,omitempty"`    // Animation's start time.
	CurrentTime  float64          `json:"currentTime,omitempty"`  // Animation's current time.
	Source       *AnimationEffect `json:"source,omitempty"`       // Animation's source animation node.
	Type         AnimationType    `json:"type,omitempty"`         // Animation type of Animation.
	CSSID        string           `json:"cssId,omitempty"`        // A unique ID for Animation representing the sources that triggered this CSS animation/transition.
}

// AnimationEffect animationEffect instance.
type AnimationEffect struct {
	Delay          float64        `json:"delay,omitempty"`          // AnimationEffect's delay.
	EndDelay       float64        `json:"endDelay,omitempty"`       // AnimationEffect's end delay.
	IterationStart float64        `json:"iterationStart,omitempty"` // AnimationEffect's iteration start.
	Iterations     float64        `json:"iterations,omitempty"`     // AnimationEffect's iterations.
	Duration       float64        `json:"duration,omitempty"`       // AnimationEffect's iteration duration.
	Direction      string         `json:"direction,omitempty"`      // AnimationEffect's playback direction.
	Fill           string         `json:"fill,omitempty"`           // AnimationEffect's fill mode.
	BackendNodeID  BackendNodeID  `json:"backendNodeId,omitempty"`  // AnimationEffect's target node.
	KeyframesRule  *KeyframesRule `json:"keyframesRule,omitempty"`  // AnimationEffect's keyframes.
	Easing         string         `json:"easing,omitempty"`         // AnimationEffect's timing function.
}

// KeyframesRule keyframes Rule.
type KeyframesRule struct {
	Name      string           `json:"name,omitempty"`      // CSS keyframed animation's name.
	Keyframes []*KeyframeStyle `json:"keyframes,omitempty"` // List of animation keyframes.
}

// KeyframeStyle keyframe Style.
type KeyframeStyle struct {
	Offset string `json:"offset,omitempty"` // Keyframe's time offset.
	Easing string `json:"easing,omitempty"` // AnimationEffect's timing function.
}

// AnimationType animation type of Animation.
type AnimationType string

// String returns the AnimationType as string value.
func (t AnimationType) String() string {
	return string(t)
}

// AnimationType values.
const (
	AnimationTypeCSSTransition AnimationType = "CSSTransition"
	AnimationTypeCSSAnimation  AnimationType = "CSSAnimation"
	AnimationTypeWebAnimation  AnimationType = "WebAnimation"
)

// MarshalEasyJSON satisfies easyjson.Marshaler.
func (t AnimationType) MarshalEasyJSON(out *jwriter.Writer) {
	out.String(string(t))
}

// MarshalJSON satisfies json.Marshaler.
func (t AnimationType) MarshalJSON() ([]byte, error) {
	return easyjson.Marshal(t)
}

// UnmarshalEasyJSON satisfies easyjson.Unmarshaler.
func (t *AnimationType) UnmarshalEasyJSON(in *jlexer.Lexer) {
	switch AnimationType(in.String()) {
	case AnimationTypeCSSTransition:
		*t = AnimationTypeCSSTransition
	case AnimationTypeCSSAnimation:
		*t = AnimationTypeCSSAnimation
	case AnimationTypeWebAnimation:
		*t = AnimationTypeWebAnimation

	default:
		in.AddError(errors.New("unknown AnimationType value"))
	}
}

// UnmarshalJSON satisfies json.Unmarshaler.
func (t *AnimationType) UnmarshalJSON(buf []byte) error {
	return easyjson.Unmarshal(buf, t)
}
