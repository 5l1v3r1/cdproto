package serviceworker

// AUTOGENERATED. DO NOT EDIT.

import (
	"errors"

	. "github.com/knq/chromedp/cdp"
	"github.com/knq/chromedp/cdp/target"
	"github.com/mailru/easyjson"
	"github.com/mailru/easyjson/jlexer"
	"github.com/mailru/easyjson/jwriter"
)

var (
	_ BackendNode
	_ BackendNodeID
	_ ComputedProperty
	_ ErrorType
	_ Frame
	_ FrameID
	_ LoaderID
	_ Message
	_ MessageError
	_ MethodType
	_ Node
	_ NodeID
	_ NodeType
	_ PseudoType
	_ RGBA
	_ ShadowRootType
	_ Timestamp
)

// ServiceWorkerRegistration serviceWorker registration.
type ServiceWorkerRegistration struct {
	RegistrationID string `json:"registrationId,omitempty"`
	ScopeURL       string `json:"scopeURL,omitempty"`
	IsDeleted      bool   `json:"isDeleted,omitempty"`
}

type ServiceWorkerVersionRunningStatus string

// String returns the ServiceWorkerVersionRunningStatus as string value.
func (t ServiceWorkerVersionRunningStatus) String() string {
	return string(t)
}

// ServiceWorkerVersionRunningStatus values.
const (
	ServiceWorkerVersionRunningStatusStopped  ServiceWorkerVersionRunningStatus = "stopped"
	ServiceWorkerVersionRunningStatusStarting ServiceWorkerVersionRunningStatus = "starting"
	ServiceWorkerVersionRunningStatusRunning  ServiceWorkerVersionRunningStatus = "running"
	ServiceWorkerVersionRunningStatusStopping ServiceWorkerVersionRunningStatus = "stopping"
)

// MarshalEasyJSON satisfies easyjson.Marshaler.
func (t ServiceWorkerVersionRunningStatus) MarshalEasyJSON(out *jwriter.Writer) {
	out.String(string(t))
}

// MarshalJSON satisfies json.Marshaler.
func (t ServiceWorkerVersionRunningStatus) MarshalJSON() ([]byte, error) {
	return easyjson.Marshal(t)
}

// UnmarshalEasyJSON satisfies easyjson.Unmarshaler.
func (t *ServiceWorkerVersionRunningStatus) UnmarshalEasyJSON(in *jlexer.Lexer) {
	switch ServiceWorkerVersionRunningStatus(in.String()) {
	case ServiceWorkerVersionRunningStatusStopped:
		*t = ServiceWorkerVersionRunningStatusStopped
	case ServiceWorkerVersionRunningStatusStarting:
		*t = ServiceWorkerVersionRunningStatusStarting
	case ServiceWorkerVersionRunningStatusRunning:
		*t = ServiceWorkerVersionRunningStatusRunning
	case ServiceWorkerVersionRunningStatusStopping:
		*t = ServiceWorkerVersionRunningStatusStopping

	default:
		in.AddError(errors.New("unknown ServiceWorkerVersionRunningStatus value"))
	}
}

// UnmarshalJSON satisfies json.Unmarshaler.
func (t *ServiceWorkerVersionRunningStatus) UnmarshalJSON(buf []byte) error {
	return easyjson.Unmarshal(buf, t)
}

type ServiceWorkerVersionStatus string

// String returns the ServiceWorkerVersionStatus as string value.
func (t ServiceWorkerVersionStatus) String() string {
	return string(t)
}

// ServiceWorkerVersionStatus values.
const (
	ServiceWorkerVersionStatusNew        ServiceWorkerVersionStatus = "new"
	ServiceWorkerVersionStatusInstalling ServiceWorkerVersionStatus = "installing"
	ServiceWorkerVersionStatusInstalled  ServiceWorkerVersionStatus = "installed"
	ServiceWorkerVersionStatusActivating ServiceWorkerVersionStatus = "activating"
	ServiceWorkerVersionStatusActivated  ServiceWorkerVersionStatus = "activated"
	ServiceWorkerVersionStatusRedundant  ServiceWorkerVersionStatus = "redundant"
)

// MarshalEasyJSON satisfies easyjson.Marshaler.
func (t ServiceWorkerVersionStatus) MarshalEasyJSON(out *jwriter.Writer) {
	out.String(string(t))
}

// MarshalJSON satisfies json.Marshaler.
func (t ServiceWorkerVersionStatus) MarshalJSON() ([]byte, error) {
	return easyjson.Marshal(t)
}

// UnmarshalEasyJSON satisfies easyjson.Unmarshaler.
func (t *ServiceWorkerVersionStatus) UnmarshalEasyJSON(in *jlexer.Lexer) {
	switch ServiceWorkerVersionStatus(in.String()) {
	case ServiceWorkerVersionStatusNew:
		*t = ServiceWorkerVersionStatusNew
	case ServiceWorkerVersionStatusInstalling:
		*t = ServiceWorkerVersionStatusInstalling
	case ServiceWorkerVersionStatusInstalled:
		*t = ServiceWorkerVersionStatusInstalled
	case ServiceWorkerVersionStatusActivating:
		*t = ServiceWorkerVersionStatusActivating
	case ServiceWorkerVersionStatusActivated:
		*t = ServiceWorkerVersionStatusActivated
	case ServiceWorkerVersionStatusRedundant:
		*t = ServiceWorkerVersionStatusRedundant

	default:
		in.AddError(errors.New("unknown ServiceWorkerVersionStatus value"))
	}
}

// UnmarshalJSON satisfies json.Unmarshaler.
func (t *ServiceWorkerVersionStatus) UnmarshalJSON(buf []byte) error {
	return easyjson.Unmarshal(buf, t)
}

// ServiceWorkerVersion serviceWorker version.
type ServiceWorkerVersion struct {
	VersionID          string                            `json:"versionId,omitempty"`
	RegistrationID     string                            `json:"registrationId,omitempty"`
	ScriptURL          string                            `json:"scriptURL,omitempty"`
	RunningStatus      ServiceWorkerVersionRunningStatus `json:"runningStatus,omitempty"`
	Status             ServiceWorkerVersionStatus        `json:"status,omitempty"`
	ScriptLastModified float64                           `json:"scriptLastModified,omitempty"` // The Last-Modified header value of the main script.
	ScriptResponseTime float64                           `json:"scriptResponseTime,omitempty"` // The time at which the response headers of the main script were received from the server.  For cached script it is the last time the cache entry was validated.
	ControlledClients  []target.TargetID                 `json:"controlledClients,omitempty"`
	TargetID           target.TargetID                   `json:"targetId,omitempty"`
}

// ServiceWorkerErrorMessage serviceWorker error message.
type ServiceWorkerErrorMessage struct {
	ErrorMessage   string `json:"errorMessage,omitempty"`
	RegistrationID string `json:"registrationId,omitempty"`
	VersionID      string `json:"versionId,omitempty"`
	SourceURL      string `json:"sourceURL,omitempty"`
	LineNumber     int64  `json:"lineNumber,omitempty"`
	ColumnNumber   int64  `json:"columnNumber,omitempty"`
}
