// Package security provides the Chrome Debugging Protocol
// commands, types, and events for the Chrome Security domain.
//
// Security.
//
// Generated by the chromedp-gen command.
package security

// AUTOGENERATED. DO NOT EDIT.

import (
	"context"

	cdp "github.com/knq/chromedp/cdp"
	"github.com/mailru/easyjson"
)

// EnableParams enables tracking security state changes.
type EnableParams struct{}

// Enable enables tracking security state changes.
func Enable() *EnableParams {
	return &EnableParams{}
}

// Do executes Security.enable.
func (p *EnableParams) Do(ctxt context.Context, h cdp.FrameHandler) (err error) {
	if ctxt == nil {
		ctxt = context.Background()
	}

	// execute
	ch := h.Execute(ctxt, cdp.CommandSecurityEnable, cdp.Empty)

	// read response
	select {
	case res := <-ch:
		if res == nil {
			return cdp.ErrChannelClosed
		}

		switch v := res.(type) {
		case easyjson.RawMessage:
			return nil

		case error:
			return v
		}

	case <-ctxt.Done():
		return cdp.ErrContextDone
	}

	return cdp.ErrUnknownResult
}

// DisableParams disables tracking security state changes.
type DisableParams struct{}

// Disable disables tracking security state changes.
func Disable() *DisableParams {
	return &DisableParams{}
}

// Do executes Security.disable.
func (p *DisableParams) Do(ctxt context.Context, h cdp.FrameHandler) (err error) {
	if ctxt == nil {
		ctxt = context.Background()
	}

	// execute
	ch := h.Execute(ctxt, cdp.CommandSecurityDisable, cdp.Empty)

	// read response
	select {
	case res := <-ch:
		if res == nil {
			return cdp.ErrChannelClosed
		}

		switch v := res.(type) {
		case easyjson.RawMessage:
			return nil

		case error:
			return v
		}

	case <-ctxt.Done():
		return cdp.ErrContextDone
	}

	return cdp.ErrUnknownResult
}

// ShowCertificateViewerParams displays native dialog with the certificate
// details.
type ShowCertificateViewerParams struct{}

// ShowCertificateViewer displays native dialog with the certificate details.
func ShowCertificateViewer() *ShowCertificateViewerParams {
	return &ShowCertificateViewerParams{}
}

// Do executes Security.showCertificateViewer.
func (p *ShowCertificateViewerParams) Do(ctxt context.Context, h cdp.FrameHandler) (err error) {
	if ctxt == nil {
		ctxt = context.Background()
	}

	// execute
	ch := h.Execute(ctxt, cdp.CommandSecurityShowCertificateViewer, cdp.Empty)

	// read response
	select {
	case res := <-ch:
		if res == nil {
			return cdp.ErrChannelClosed
		}

		switch v := res.(type) {
		case easyjson.RawMessage:
			return nil

		case error:
			return v
		}

	case <-ctxt.Done():
		return cdp.ErrContextDone
	}

	return cdp.ErrUnknownResult
}
