// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domsnapshot

import (
	json "encoding/json"
	cdp "github.com/chromedp/cdproto/cdp"
	dom "github.com/chromedp/cdproto/dom"
	domdebugger "github.com/chromedp/cdproto/domdebugger"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot(in *jlexer.Lexer, out *TextBoxSnapshot) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "layoutIndex":
			if in.IsNull() {
				in.Skip()
				out.LayoutIndex = nil
			} else {
				in.Delim('[')
				if out.LayoutIndex == nil {
					if !in.IsDelim(']') {
						out.LayoutIndex = make([]int64, 0, 8)
					} else {
						out.LayoutIndex = []int64{}
					}
				} else {
					out.LayoutIndex = (out.LayoutIndex)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.LayoutIndex = append(out.LayoutIndex, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bounds":
			if in.IsNull() {
				in.Skip()
				out.Bounds = nil
			} else {
				in.Delim('[')
				if out.Bounds == nil {
					if !in.IsDelim(']') {
						out.Bounds = make([]Rectangle, 0, 2)
					} else {
						out.Bounds = []Rectangle{}
					}
				} else {
					out.Bounds = (out.Bounds)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Rectangle
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						in.Delim('[')
						if v2 == nil {
							if !in.IsDelim(']') {
								v2 = make(Rectangle, 0, 8)
							} else {
								v2 = Rectangle{}
							}
						} else {
							v2 = (v2)[:0]
						}
						for !in.IsDelim(']') {
							var v3 float64
							v3 = float64(in.Float64())
							v2 = append(v2, v3)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Bounds = append(out.Bounds, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "start":
			if in.IsNull() {
				in.Skip()
				out.Start = nil
			} else {
				in.Delim('[')
				if out.Start == nil {
					if !in.IsDelim(']') {
						out.Start = make([]int64, 0, 8)
					} else {
						out.Start = []int64{}
					}
				} else {
					out.Start = (out.Start)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int64
					v4 = int64(in.Int64())
					out.Start = append(out.Start, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "length":
			if in.IsNull() {
				in.Skip()
				out.Length = nil
			} else {
				in.Delim('[')
				if out.Length == nil {
					if !in.IsDelim(']') {
						out.Length = make([]int64, 0, 8)
					} else {
						out.Length = []int64{}
					}
				} else {
					out.Length = (out.Length)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int64
					v5 = int64(in.Int64())
					out.Length = append(out.Length, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot(out *jwriter.Writer, in TextBoxSnapshot) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"layoutIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.LayoutIndex == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.LayoutIndex {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"bounds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Bounds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Bounds {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v10, v11 := range v9 {
						if v10 > 0 {
							out.RawByte(',')
						}
						out.Float64(float64(v11))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Start == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Start {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Length == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Length {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextBoxSnapshot) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextBoxSnapshot) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextBoxSnapshot) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextBoxSnapshot) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot1(in *jlexer.Lexer, out *StylesSnapshot) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]ArrayOfStrings, 0, 2)
					} else {
						out.Values = []ArrayOfStrings{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v16 ArrayOfStrings
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						in.Delim('[')
						if v16 == nil {
							if !in.IsDelim(']') {
								v16 = make(ArrayOfStrings, 0, 8)
							} else {
								v16 = ArrayOfStrings{}
							}
						} else {
							v16 = (v16)[:0]
						}
						for !in.IsDelim(']') {
							var v17 int64
							v17 = int64(in.Int64())
							v16 = append(v16, v17)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Values = append(out.Values, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot1(out *jwriter.Writer, in StylesSnapshot) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"values\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Values {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v20, v21 := range v19 {
						if v20 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v21))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StylesSnapshot) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StylesSnapshot) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StylesSnapshot) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StylesSnapshot) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot1(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot2(in *jlexer.Lexer, out *RareStringData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			if in.IsNull() {
				in.Skip()
				out.Index = nil
			} else {
				in.Delim('[')
				if out.Index == nil {
					if !in.IsDelim(']') {
						out.Index = make([]int64, 0, 8)
					} else {
						out.Index = []int64{}
					}
				} else {
					out.Index = (out.Index)[:0]
				}
				for !in.IsDelim(']') {
					var v22 int64
					v22 = int64(in.Int64())
					out.Index = append(out.Index, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				in.Delim('[')
				if out.Value == nil {
					if !in.IsDelim(']') {
						out.Value = make([]StringIndex, 0, 8)
					} else {
						out.Value = []StringIndex{}
					}
				} else {
					out.Value = (out.Value)[:0]
				}
				for !in.IsDelim(']') {
					var v23 StringIndex
					v23 = StringIndex(in.Int64())
					out.Value = append(out.Value, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot2(out *jwriter.Writer, in RareStringData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Index == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Index {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v25))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Value {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v27))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RareStringData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RareStringData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RareStringData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RareStringData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot2(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot3(in *jlexer.Lexer, out *RareIntegerData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			if in.IsNull() {
				in.Skip()
				out.Index = nil
			} else {
				in.Delim('[')
				if out.Index == nil {
					if !in.IsDelim(']') {
						out.Index = make([]int64, 0, 8)
					} else {
						out.Index = []int64{}
					}
				} else {
					out.Index = (out.Index)[:0]
				}
				for !in.IsDelim(']') {
					var v28 int64
					v28 = int64(in.Int64())
					out.Index = append(out.Index, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				in.Delim('[')
				if out.Value == nil {
					if !in.IsDelim(']') {
						out.Value = make([]int64, 0, 8)
					} else {
						out.Value = []int64{}
					}
				} else {
					out.Value = (out.Value)[:0]
				}
				for !in.IsDelim(']') {
					var v29 int64
					v29 = int64(in.Int64())
					out.Value = append(out.Value, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot3(out *jwriter.Writer, in RareIntegerData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Index == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.Index {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v31))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Value {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v33))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RareIntegerData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RareIntegerData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RareIntegerData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RareIntegerData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot3(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot4(in *jlexer.Lexer, out *RareBooleanData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			if in.IsNull() {
				in.Skip()
				out.Index = nil
			} else {
				in.Delim('[')
				if out.Index == nil {
					if !in.IsDelim(']') {
						out.Index = make([]int64, 0, 8)
					} else {
						out.Index = []int64{}
					}
				} else {
					out.Index = (out.Index)[:0]
				}
				for !in.IsDelim(']') {
					var v34 int64
					v34 = int64(in.Int64())
					out.Index = append(out.Index, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot4(out *jwriter.Writer, in RareBooleanData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Index == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Index {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v36))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RareBooleanData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RareBooleanData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RareBooleanData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RareBooleanData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot4(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot5(in *jlexer.Lexer, out *NameValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot5(out *jwriter.Writer, in NameValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NameValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NameValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NameValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NameValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot5(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot6(in *jlexer.Lexer, out *LayoutTreeSnapshot) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeIndex":
			if in.IsNull() {
				in.Skip()
				out.NodeIndex = nil
			} else {
				in.Delim('[')
				if out.NodeIndex == nil {
					if !in.IsDelim(']') {
						out.NodeIndex = make([]int64, 0, 8)
					} else {
						out.NodeIndex = []int64{}
					}
				} else {
					out.NodeIndex = (out.NodeIndex)[:0]
				}
				for !in.IsDelim(']') {
					var v37 int64
					v37 = int64(in.Int64())
					out.NodeIndex = append(out.NodeIndex, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "styles":
			if in.IsNull() {
				in.Skip()
				out.Styles = nil
			} else {
				in.Delim('[')
				if out.Styles == nil {
					if !in.IsDelim(']') {
						out.Styles = make([]ArrayOfStrings, 0, 2)
					} else {
						out.Styles = []ArrayOfStrings{}
					}
				} else {
					out.Styles = (out.Styles)[:0]
				}
				for !in.IsDelim(']') {
					var v38 ArrayOfStrings
					if in.IsNull() {
						in.Skip()
						v38 = nil
					} else {
						in.Delim('[')
						if v38 == nil {
							if !in.IsDelim(']') {
								v38 = make(ArrayOfStrings, 0, 8)
							} else {
								v38 = ArrayOfStrings{}
							}
						} else {
							v38 = (v38)[:0]
						}
						for !in.IsDelim(']') {
							var v39 int64
							v39 = int64(in.Int64())
							v38 = append(v38, v39)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Styles = append(out.Styles, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bounds":
			if in.IsNull() {
				in.Skip()
				out.Bounds = nil
			} else {
				in.Delim('[')
				if out.Bounds == nil {
					if !in.IsDelim(']') {
						out.Bounds = make([]Rectangle, 0, 2)
					} else {
						out.Bounds = []Rectangle{}
					}
				} else {
					out.Bounds = (out.Bounds)[:0]
				}
				for !in.IsDelim(']') {
					var v40 Rectangle
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						in.Delim('[')
						if v40 == nil {
							if !in.IsDelim(']') {
								v40 = make(Rectangle, 0, 8)
							} else {
								v40 = Rectangle{}
							}
						} else {
							v40 = (v40)[:0]
						}
						for !in.IsDelim(']') {
							var v41 float64
							v41 = float64(in.Float64())
							v40 = append(v40, v41)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Bounds = append(out.Bounds, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				in.Delim('[')
				if out.Text == nil {
					if !in.IsDelim(']') {
						out.Text = make([]StringIndex, 0, 8)
					} else {
						out.Text = []StringIndex{}
					}
				} else {
					out.Text = (out.Text)[:0]
				}
				for !in.IsDelim(']') {
					var v42 StringIndex
					v42 = StringIndex(in.Int64())
					out.Text = append(out.Text, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "textBoxes":
			if in.IsNull() {
				in.Skip()
				out.TextBoxes = nil
			} else {
				if out.TextBoxes == nil {
					out.TextBoxes = new(TextBoxSnapshot)
				}
				(*out.TextBoxes).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot6(out *jwriter.Writer, in LayoutTreeSnapshot) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodeIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.NodeIndex == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.NodeIndex {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v44))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"styles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Styles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.Styles {
				if v45 > 0 {
					out.RawByte(',')
				}
				if v46 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v47, v48 := range v46 {
						if v47 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v48))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"bounds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Bounds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.Bounds {
				if v49 > 0 {
					out.RawByte(',')
				}
				if v50 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v51, v52 := range v50 {
						if v51 > 0 {
							out.RawByte(',')
						}
						out.Float64(float64(v52))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Text == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Text {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v54))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"textBoxes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TextBoxes == nil {
			out.RawString("null")
		} else {
			(*in.TextBoxes).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LayoutTreeSnapshot) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LayoutTreeSnapshot) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LayoutTreeSnapshot) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LayoutTreeSnapshot) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot6(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot7(in *jlexer.Lexer, out *LayoutTreeNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "domNodeIndex":
			out.DomNodeIndex = int64(in.Int64())
		case "boundingBox":
			if in.IsNull() {
				in.Skip()
				out.BoundingBox = nil
			} else {
				if out.BoundingBox == nil {
					out.BoundingBox = new(dom.Rect)
				}
				(*out.BoundingBox).UnmarshalEasyJSON(in)
			}
		case "layoutText":
			out.LayoutText = string(in.String())
		case "inlineTextNodes":
			if in.IsNull() {
				in.Skip()
				out.InlineTextNodes = nil
			} else {
				in.Delim('[')
				if out.InlineTextNodes == nil {
					if !in.IsDelim(']') {
						out.InlineTextNodes = make([]*InlineTextBox, 0, 8)
					} else {
						out.InlineTextNodes = []*InlineTextBox{}
					}
				} else {
					out.InlineTextNodes = (out.InlineTextNodes)[:0]
				}
				for !in.IsDelim(']') {
					var v55 *InlineTextBox
					if in.IsNull() {
						in.Skip()
						v55 = nil
					} else {
						if v55 == nil {
							v55 = new(InlineTextBox)
						}
						(*v55).UnmarshalEasyJSON(in)
					}
					out.InlineTextNodes = append(out.InlineTextNodes, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "styleIndex":
			out.StyleIndex = int64(in.Int64())
		case "paintOrder":
			out.PaintOrder = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot7(out *jwriter.Writer, in LayoutTreeNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"domNodeIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DomNodeIndex))
	}
	{
		const prefix string = ",\"boundingBox\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.BoundingBox == nil {
			out.RawString("null")
		} else {
			(*in.BoundingBox).MarshalEasyJSON(out)
		}
	}
	if in.LayoutText != "" {
		const prefix string = ",\"layoutText\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutText))
	}
	if len(in.InlineTextNodes) != 0 {
		const prefix string = ",\"inlineTextNodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.InlineTextNodes {
				if v56 > 0 {
					out.RawByte(',')
				}
				if v57 == nil {
					out.RawString("null")
				} else {
					(*v57).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.StyleIndex != 0 {
		const prefix string = ",\"styleIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StyleIndex))
	}
	if in.PaintOrder != 0 {
		const prefix string = ",\"paintOrder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PaintOrder))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LayoutTreeNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LayoutTreeNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LayoutTreeNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LayoutTreeNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot7(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot8(in *jlexer.Lexer, out *InlineTextBox) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "boundingBox":
			if in.IsNull() {
				in.Skip()
				out.BoundingBox = nil
			} else {
				if out.BoundingBox == nil {
					out.BoundingBox = new(dom.Rect)
				}
				(*out.BoundingBox).UnmarshalEasyJSON(in)
			}
		case "startCharacterIndex":
			out.StartCharacterIndex = int64(in.Int64())
		case "numCharacters":
			out.NumCharacters = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot8(out *jwriter.Writer, in InlineTextBox) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"boundingBox\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.BoundingBox == nil {
			out.RawString("null")
		} else {
			(*in.BoundingBox).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"startCharacterIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StartCharacterIndex))
	}
	{
		const prefix string = ",\"numCharacters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NumCharacters))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineTextBox) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineTextBox) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineTextBox) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineTextBox) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot8(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot9(in *jlexer.Lexer, out *EnableParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot9(out *jwriter.Writer, in EnableParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnableParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnableParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnableParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnableParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot9(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot10(in *jlexer.Lexer, out *DisableParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot10(out *jwriter.Writer, in DisableParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DisableParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DisableParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DisableParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DisableParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot10(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot11(in *jlexer.Lexer, out *DOMTreeSnapshot) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parentIndex":
			if in.IsNull() {
				in.Skip()
				out.ParentIndex = nil
			} else {
				in.Delim('[')
				if out.ParentIndex == nil {
					if !in.IsDelim(']') {
						out.ParentIndex = make([]int64, 0, 8)
					} else {
						out.ParentIndex = []int64{}
					}
				} else {
					out.ParentIndex = (out.ParentIndex)[:0]
				}
				for !in.IsDelim(']') {
					var v58 int64
					v58 = int64(in.Int64())
					out.ParentIndex = append(out.ParentIndex, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nodeType":
			if in.IsNull() {
				in.Skip()
				out.NodeType = nil
			} else {
				in.Delim('[')
				if out.NodeType == nil {
					if !in.IsDelim(']') {
						out.NodeType = make([]int64, 0, 8)
					} else {
						out.NodeType = []int64{}
					}
				} else {
					out.NodeType = (out.NodeType)[:0]
				}
				for !in.IsDelim(']') {
					var v59 int64
					v59 = int64(in.Int64())
					out.NodeType = append(out.NodeType, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nodeName":
			if in.IsNull() {
				in.Skip()
				out.NodeName = nil
			} else {
				in.Delim('[')
				if out.NodeName == nil {
					if !in.IsDelim(']') {
						out.NodeName = make([]StringIndex, 0, 8)
					} else {
						out.NodeName = []StringIndex{}
					}
				} else {
					out.NodeName = (out.NodeName)[:0]
				}
				for !in.IsDelim(']') {
					var v60 StringIndex
					v60 = StringIndex(in.Int64())
					out.NodeName = append(out.NodeName, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nodeValue":
			if in.IsNull() {
				in.Skip()
				out.NodeValue = nil
			} else {
				in.Delim('[')
				if out.NodeValue == nil {
					if !in.IsDelim(']') {
						out.NodeValue = make([]StringIndex, 0, 8)
					} else {
						out.NodeValue = []StringIndex{}
					}
				} else {
					out.NodeValue = (out.NodeValue)[:0]
				}
				for !in.IsDelim(']') {
					var v61 StringIndex
					v61 = StringIndex(in.Int64())
					out.NodeValue = append(out.NodeValue, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "backendNodeId":
			if in.IsNull() {
				in.Skip()
				out.BackendNodeID = nil
			} else {
				in.Delim('[')
				if out.BackendNodeID == nil {
					if !in.IsDelim(']') {
						out.BackendNodeID = make([]cdp.BackendNodeID, 0, 8)
					} else {
						out.BackendNodeID = []cdp.BackendNodeID{}
					}
				} else {
					out.BackendNodeID = (out.BackendNodeID)[:0]
				}
				for !in.IsDelim(']') {
					var v62 cdp.BackendNodeID
					(v62).UnmarshalEasyJSON(in)
					out.BackendNodeID = append(out.BackendNodeID, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]ArrayOfStrings, 0, 2)
					} else {
						out.Attributes = []ArrayOfStrings{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v63 ArrayOfStrings
					if in.IsNull() {
						in.Skip()
						v63 = nil
					} else {
						in.Delim('[')
						if v63 == nil {
							if !in.IsDelim(']') {
								v63 = make(ArrayOfStrings, 0, 8)
							} else {
								v63 = ArrayOfStrings{}
							}
						} else {
							v63 = (v63)[:0]
						}
						for !in.IsDelim(']') {
							var v64 int64
							v64 = int64(in.Int64())
							v63 = append(v63, v64)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Attributes = append(out.Attributes, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "layoutNodeIndex":
			if in.IsNull() {
				in.Skip()
				out.LayoutNodeIndex = nil
			} else {
				in.Delim('[')
				if out.LayoutNodeIndex == nil {
					if !in.IsDelim(']') {
						out.LayoutNodeIndex = make([]int64, 0, 8)
					} else {
						out.LayoutNodeIndex = []int64{}
					}
				} else {
					out.LayoutNodeIndex = (out.LayoutNodeIndex)[:0]
				}
				for !in.IsDelim(']') {
					var v65 int64
					v65 = int64(in.Int64())
					out.LayoutNodeIndex = append(out.LayoutNodeIndex, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "textValue":
			if in.IsNull() {
				in.Skip()
				out.TextValue = nil
			} else {
				if out.TextValue == nil {
					out.TextValue = new(RareStringData)
				}
				(*out.TextValue).UnmarshalEasyJSON(in)
			}
		case "inputValue":
			if in.IsNull() {
				in.Skip()
				out.InputValue = nil
			} else {
				if out.InputValue == nil {
					out.InputValue = new(RareStringData)
				}
				(*out.InputValue).UnmarshalEasyJSON(in)
			}
		case "inputChecked":
			if in.IsNull() {
				in.Skip()
				out.InputChecked = nil
			} else {
				if out.InputChecked == nil {
					out.InputChecked = new(RareBooleanData)
				}
				(*out.InputChecked).UnmarshalEasyJSON(in)
			}
		case "optionSelected":
			if in.IsNull() {
				in.Skip()
				out.OptionSelected = nil
			} else {
				if out.OptionSelected == nil {
					out.OptionSelected = new(RareBooleanData)
				}
				(*out.OptionSelected).UnmarshalEasyJSON(in)
			}
		case "documentURL":
			if in.IsNull() {
				in.Skip()
				out.DocumentURL = nil
			} else {
				if out.DocumentURL == nil {
					out.DocumentURL = new(RareStringData)
				}
				(*out.DocumentURL).UnmarshalEasyJSON(in)
			}
		case "baseURL":
			if in.IsNull() {
				in.Skip()
				out.BaseURL = nil
			} else {
				if out.BaseURL == nil {
					out.BaseURL = new(RareStringData)
				}
				(*out.BaseURL).UnmarshalEasyJSON(in)
			}
		case "contentLanguage":
			if in.IsNull() {
				in.Skip()
				out.ContentLanguage = nil
			} else {
				if out.ContentLanguage == nil {
					out.ContentLanguage = new(RareStringData)
				}
				(*out.ContentLanguage).UnmarshalEasyJSON(in)
			}
		case "documentEncoding":
			if in.IsNull() {
				in.Skip()
				out.DocumentEncoding = nil
			} else {
				if out.DocumentEncoding == nil {
					out.DocumentEncoding = new(RareStringData)
				}
				(*out.DocumentEncoding).UnmarshalEasyJSON(in)
			}
		case "publicId":
			if in.IsNull() {
				in.Skip()
				out.PublicID = nil
			} else {
				if out.PublicID == nil {
					out.PublicID = new(RareStringData)
				}
				(*out.PublicID).UnmarshalEasyJSON(in)
			}
		case "systemId":
			if in.IsNull() {
				in.Skip()
				out.SystemID = nil
			} else {
				if out.SystemID == nil {
					out.SystemID = new(RareStringData)
				}
				(*out.SystemID).UnmarshalEasyJSON(in)
			}
		case "frameId":
			if in.IsNull() {
				in.Skip()
				out.FrameID = nil
			} else {
				if out.FrameID == nil {
					out.FrameID = new(RareStringData)
				}
				(*out.FrameID).UnmarshalEasyJSON(in)
			}
		case "contentDocumentIndex":
			if in.IsNull() {
				in.Skip()
				out.ContentDocumentIndex = nil
			} else {
				if out.ContentDocumentIndex == nil {
					out.ContentDocumentIndex = new(RareIntegerData)
				}
				(*out.ContentDocumentIndex).UnmarshalEasyJSON(in)
			}
		case "importedDocumentIndex":
			if in.IsNull() {
				in.Skip()
				out.ImportedDocumentIndex = nil
			} else {
				if out.ImportedDocumentIndex == nil {
					out.ImportedDocumentIndex = new(RareIntegerData)
				}
				(*out.ImportedDocumentIndex).UnmarshalEasyJSON(in)
			}
		case "templateContentIndex":
			if in.IsNull() {
				in.Skip()
				out.TemplateContentIndex = nil
			} else {
				if out.TemplateContentIndex == nil {
					out.TemplateContentIndex = new(RareIntegerData)
				}
				(*out.TemplateContentIndex).UnmarshalEasyJSON(in)
			}
		case "pseudoType":
			if in.IsNull() {
				in.Skip()
				out.PseudoType = nil
			} else {
				if out.PseudoType == nil {
					out.PseudoType = new(RareStringData)
				}
				(*out.PseudoType).UnmarshalEasyJSON(in)
			}
		case "isClickable":
			if in.IsNull() {
				in.Skip()
				out.IsClickable = nil
			} else {
				if out.IsClickable == nil {
					out.IsClickable = new(RareBooleanData)
				}
				(*out.IsClickable).UnmarshalEasyJSON(in)
			}
		case "currentSourceURL":
			if in.IsNull() {
				in.Skip()
				out.CurrentSourceURL = nil
			} else {
				if out.CurrentSourceURL == nil {
					out.CurrentSourceURL = new(RareStringData)
				}
				(*out.CurrentSourceURL).UnmarshalEasyJSON(in)
			}
		case "originURL":
			if in.IsNull() {
				in.Skip()
				out.OriginURL = nil
			} else {
				if out.OriginURL == nil {
					out.OriginURL = new(RareStringData)
				}
				(*out.OriginURL).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot11(out *jwriter.Writer, in DOMTreeSnapshot) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.ParentIndex) != 0 {
		const prefix string = ",\"parentIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v66, v67 := range in.ParentIndex {
				if v66 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v67))
			}
			out.RawByte(']')
		}
	}
	if len(in.NodeType) != 0 {
		const prefix string = ",\"nodeType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v68, v69 := range in.NodeType {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v69))
			}
			out.RawByte(']')
		}
	}
	if len(in.NodeName) != 0 {
		const prefix string = ",\"nodeName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v70, v71 := range in.NodeName {
				if v70 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v71))
			}
			out.RawByte(']')
		}
	}
	if len(in.NodeValue) != 0 {
		const prefix string = ",\"nodeValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v72, v73 := range in.NodeValue {
				if v72 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v73))
			}
			out.RawByte(']')
		}
	}
	if len(in.BackendNodeID) != 0 {
		const prefix string = ",\"backendNodeId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v74, v75 := range in.BackendNodeID {
				if v74 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v75))
			}
			out.RawByte(']')
		}
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v76, v77 := range in.Attributes {
				if v76 > 0 {
					out.RawByte(',')
				}
				if v77 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v78, v79 := range v77 {
						if v78 > 0 {
							out.RawByte(',')
						}
						out.Int64(int64(v79))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.LayoutNodeIndex) != 0 {
		const prefix string = ",\"layoutNodeIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v80, v81 := range in.LayoutNodeIndex {
				if v80 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v81))
			}
			out.RawByte(']')
		}
	}
	if in.TextValue != nil {
		const prefix string = ",\"textValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TextValue).MarshalEasyJSON(out)
	}
	if in.InputValue != nil {
		const prefix string = ",\"inputValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.InputValue).MarshalEasyJSON(out)
	}
	if in.InputChecked != nil {
		const prefix string = ",\"inputChecked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.InputChecked).MarshalEasyJSON(out)
	}
	if in.OptionSelected != nil {
		const prefix string = ",\"optionSelected\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OptionSelected).MarshalEasyJSON(out)
	}
	if in.DocumentURL != nil {
		const prefix string = ",\"documentURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DocumentURL).MarshalEasyJSON(out)
	}
	if in.BaseURL != nil {
		const prefix string = ",\"baseURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BaseURL).MarshalEasyJSON(out)
	}
	if in.ContentLanguage != nil {
		const prefix string = ",\"contentLanguage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ContentLanguage).MarshalEasyJSON(out)
	}
	if in.DocumentEncoding != nil {
		const prefix string = ",\"documentEncoding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DocumentEncoding).MarshalEasyJSON(out)
	}
	if in.PublicID != nil {
		const prefix string = ",\"publicId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PublicID).MarshalEasyJSON(out)
	}
	if in.SystemID != nil {
		const prefix string = ",\"systemId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SystemID).MarshalEasyJSON(out)
	}
	if in.FrameID != nil {
		const prefix string = ",\"frameId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FrameID).MarshalEasyJSON(out)
	}
	if in.ContentDocumentIndex != nil {
		const prefix string = ",\"contentDocumentIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ContentDocumentIndex).MarshalEasyJSON(out)
	}
	if in.ImportedDocumentIndex != nil {
		const prefix string = ",\"importedDocumentIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ImportedDocumentIndex).MarshalEasyJSON(out)
	}
	if in.TemplateContentIndex != nil {
		const prefix string = ",\"templateContentIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TemplateContentIndex).MarshalEasyJSON(out)
	}
	if in.PseudoType != nil {
		const prefix string = ",\"pseudoType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PseudoType).MarshalEasyJSON(out)
	}
	if in.IsClickable != nil {
		const prefix string = ",\"isClickable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IsClickable).MarshalEasyJSON(out)
	}
	if in.CurrentSourceURL != nil {
		const prefix string = ",\"currentSourceURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CurrentSourceURL).MarshalEasyJSON(out)
	}
	if in.OriginURL != nil {
		const prefix string = ",\"originURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OriginURL).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DOMTreeSnapshot) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DOMTreeSnapshot) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DOMTreeSnapshot) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DOMTreeSnapshot) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot11(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot12(in *jlexer.Lexer, out *DOMNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeType":
			(out.NodeType).UnmarshalEasyJSON(in)
		case "nodeName":
			out.NodeName = string(in.String())
		case "nodeValue":
			out.NodeValue = string(in.String())
		case "textValue":
			out.TextValue = string(in.String())
		case "inputValue":
			out.InputValue = string(in.String())
		case "inputChecked":
			out.InputChecked = bool(in.Bool())
		case "optionSelected":
			out.OptionSelected = bool(in.Bool())
		case "backendNodeId":
			(out.BackendNodeID).UnmarshalEasyJSON(in)
		case "childNodeIndexes":
			if in.IsNull() {
				in.Skip()
				out.ChildNodeIndexes = nil
			} else {
				in.Delim('[')
				if out.ChildNodeIndexes == nil {
					if !in.IsDelim(']') {
						out.ChildNodeIndexes = make([]int64, 0, 8)
					} else {
						out.ChildNodeIndexes = []int64{}
					}
				} else {
					out.ChildNodeIndexes = (out.ChildNodeIndexes)[:0]
				}
				for !in.IsDelim(']') {
					var v82 int64
					v82 = int64(in.Int64())
					out.ChildNodeIndexes = append(out.ChildNodeIndexes, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]*NameValue, 0, 8)
					} else {
						out.Attributes = []*NameValue{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v83 *NameValue
					if in.IsNull() {
						in.Skip()
						v83 = nil
					} else {
						if v83 == nil {
							v83 = new(NameValue)
						}
						(*v83).UnmarshalEasyJSON(in)
					}
					out.Attributes = append(out.Attributes, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pseudoElementIndexes":
			if in.IsNull() {
				in.Skip()
				out.PseudoElementIndexes = nil
			} else {
				in.Delim('[')
				if out.PseudoElementIndexes == nil {
					if !in.IsDelim(']') {
						out.PseudoElementIndexes = make([]int64, 0, 8)
					} else {
						out.PseudoElementIndexes = []int64{}
					}
				} else {
					out.PseudoElementIndexes = (out.PseudoElementIndexes)[:0]
				}
				for !in.IsDelim(']') {
					var v84 int64
					v84 = int64(in.Int64())
					out.PseudoElementIndexes = append(out.PseudoElementIndexes, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "layoutNodeIndex":
			out.LayoutNodeIndex = int64(in.Int64())
		case "documentURL":
			out.DocumentURL = string(in.String())
		case "baseURL":
			out.BaseURL = string(in.String())
		case "contentLanguage":
			out.ContentLanguage = string(in.String())
		case "documentEncoding":
			out.DocumentEncoding = string(in.String())
		case "publicId":
			out.PublicID = string(in.String())
		case "systemId":
			out.SystemID = string(in.String())
		case "frameId":
			(out.FrameID).UnmarshalEasyJSON(in)
		case "contentDocumentIndex":
			out.ContentDocumentIndex = int64(in.Int64())
		case "importedDocumentIndex":
			out.ImportedDocumentIndex = int64(in.Int64())
		case "templateContentIndex":
			out.TemplateContentIndex = int64(in.Int64())
		case "pseudoType":
			(out.PseudoType).UnmarshalEasyJSON(in)
		case "shadowRootType":
			(out.ShadowRootType).UnmarshalEasyJSON(in)
		case "isClickable":
			out.IsClickable = bool(in.Bool())
		case "eventListeners":
			if in.IsNull() {
				in.Skip()
				out.EventListeners = nil
			} else {
				in.Delim('[')
				if out.EventListeners == nil {
					if !in.IsDelim(']') {
						out.EventListeners = make([]*domdebugger.EventListener, 0, 8)
					} else {
						out.EventListeners = []*domdebugger.EventListener{}
					}
				} else {
					out.EventListeners = (out.EventListeners)[:0]
				}
				for !in.IsDelim(']') {
					var v85 *domdebugger.EventListener
					if in.IsNull() {
						in.Skip()
						v85 = nil
					} else {
						if v85 == nil {
							v85 = new(domdebugger.EventListener)
						}
						(*v85).UnmarshalEasyJSON(in)
					}
					out.EventListeners = append(out.EventListeners, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "currentSourceURL":
			out.CurrentSourceURL = string(in.String())
		case "originURL":
			out.OriginURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot12(out *jwriter.Writer, in DOMNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodeType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.NodeType).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"nodeName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeName))
	}
	{
		const prefix string = ",\"nodeValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeValue))
	}
	if in.TextValue != "" {
		const prefix string = ",\"textValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TextValue))
	}
	if in.InputValue != "" {
		const prefix string = ",\"inputValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InputValue))
	}
	if in.InputChecked {
		const prefix string = ",\"inputChecked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.InputChecked))
	}
	if in.OptionSelected {
		const prefix string = ",\"optionSelected\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OptionSelected))
	}
	{
		const prefix string = ",\"backendNodeId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BackendNodeID))
	}
	if len(in.ChildNodeIndexes) != 0 {
		const prefix string = ",\"childNodeIndexes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v86, v87 := range in.ChildNodeIndexes {
				if v86 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v87))
			}
			out.RawByte(']')
		}
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v88, v89 := range in.Attributes {
				if v88 > 0 {
					out.RawByte(',')
				}
				if v89 == nil {
					out.RawString("null")
				} else {
					(*v89).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.PseudoElementIndexes) != 0 {
		const prefix string = ",\"pseudoElementIndexes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v90, v91 := range in.PseudoElementIndexes {
				if v90 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v91))
			}
			out.RawByte(']')
		}
	}
	if in.LayoutNodeIndex != 0 {
		const prefix string = ",\"layoutNodeIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LayoutNodeIndex))
	}
	if in.DocumentURL != "" {
		const prefix string = ",\"documentURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DocumentURL))
	}
	if in.BaseURL != "" {
		const prefix string = ",\"baseURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseURL))
	}
	if in.ContentLanguage != "" {
		const prefix string = ",\"contentLanguage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContentLanguage))
	}
	if in.DocumentEncoding != "" {
		const prefix string = ",\"documentEncoding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DocumentEncoding))
	}
	if in.PublicID != "" {
		const prefix string = ",\"publicId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PublicID))
	}
	if in.SystemID != "" {
		const prefix string = ",\"systemId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SystemID))
	}
	if in.FrameID != "" {
		const prefix string = ",\"frameId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FrameID))
	}
	if in.ContentDocumentIndex != 0 {
		const prefix string = ",\"contentDocumentIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ContentDocumentIndex))
	}
	if in.ImportedDocumentIndex != 0 {
		const prefix string = ",\"importedDocumentIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ImportedDocumentIndex))
	}
	if in.TemplateContentIndex != 0 {
		const prefix string = ",\"templateContentIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TemplateContentIndex))
	}
	if in.PseudoType != "" {
		const prefix string = ",\"pseudoType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.PseudoType).MarshalEasyJSON(out)
	}
	if in.ShadowRootType != "" {
		const prefix string = ",\"shadowRootType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ShadowRootType).MarshalEasyJSON(out)
	}
	if in.IsClickable {
		const prefix string = ",\"isClickable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsClickable))
	}
	if len(in.EventListeners) != 0 {
		const prefix string = ",\"eventListeners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v92, v93 := range in.EventListeners {
				if v92 > 0 {
					out.RawByte(',')
				}
				if v93 == nil {
					out.RawString("null")
				} else {
					(*v93).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.CurrentSourceURL != "" {
		const prefix string = ",\"currentSourceURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CurrentSourceURL))
	}
	if in.OriginURL != "" {
		const prefix string = ",\"originURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OriginURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DOMNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DOMNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DOMNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DOMNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot12(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot13(in *jlexer.Lexer, out *ComputedStyle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "properties":
			if in.IsNull() {
				in.Skip()
				out.Properties = nil
			} else {
				in.Delim('[')
				if out.Properties == nil {
					if !in.IsDelim(']') {
						out.Properties = make([]*NameValue, 0, 8)
					} else {
						out.Properties = []*NameValue{}
					}
				} else {
					out.Properties = (out.Properties)[:0]
				}
				for !in.IsDelim(']') {
					var v94 *NameValue
					if in.IsNull() {
						in.Skip()
						v94 = nil
					} else {
						if v94 == nil {
							v94 = new(NameValue)
						}
						(*v94).UnmarshalEasyJSON(in)
					}
					out.Properties = append(out.Properties, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot13(out *jwriter.Writer, in ComputedStyle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"properties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Properties == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v95, v96 := range in.Properties {
				if v95 > 0 {
					out.RawByte(',')
				}
				if v96 == nil {
					out.RawString("null")
				} else {
					(*v96).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComputedStyle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComputedStyle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComputedStyle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComputedStyle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot13(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot14(in *jlexer.Lexer, out *CaptureSnapshotReturns) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				if out.Nodes == nil {
					out.Nodes = new(DOMTreeSnapshot)
				}
				(*out.Nodes).UnmarshalEasyJSON(in)
			}
		case "layout":
			if in.IsNull() {
				in.Skip()
				out.Layout = nil
			} else {
				if out.Layout == nil {
					out.Layout = new(LayoutTreeSnapshot)
				}
				(*out.Layout).UnmarshalEasyJSON(in)
			}
		case "strings":
			if in.IsNull() {
				in.Skip()
				out.Strings = nil
			} else {
				in.Delim('[')
				if out.Strings == nil {
					if !in.IsDelim(']') {
						out.Strings = make([]string, 0, 4)
					} else {
						out.Strings = []string{}
					}
				} else {
					out.Strings = (out.Strings)[:0]
				}
				for !in.IsDelim(']') {
					var v97 string
					v97 = string(in.String())
					out.Strings = append(out.Strings, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot14(out *jwriter.Writer, in CaptureSnapshotReturns) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Nodes != nil {
		const prefix string = ",\"nodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Nodes).MarshalEasyJSON(out)
	}
	if in.Layout != nil {
		const prefix string = ",\"layout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Layout).MarshalEasyJSON(out)
	}
	if len(in.Strings) != 0 {
		const prefix string = ",\"strings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v98, v99 := range in.Strings {
				if v98 > 0 {
					out.RawByte(',')
				}
				out.String(string(v99))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CaptureSnapshotReturns) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CaptureSnapshotReturns) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CaptureSnapshotReturns) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CaptureSnapshotReturns) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot14(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot15(in *jlexer.Lexer, out *CaptureSnapshotParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "computedStyles":
			if in.IsNull() {
				in.Skip()
				out.ComputedStyles = nil
			} else {
				in.Delim('[')
				if out.ComputedStyles == nil {
					if !in.IsDelim(']') {
						out.ComputedStyles = make([]string, 0, 4)
					} else {
						out.ComputedStyles = []string{}
					}
				} else {
					out.ComputedStyles = (out.ComputedStyles)[:0]
				}
				for !in.IsDelim(']') {
					var v100 string
					v100 = string(in.String())
					out.ComputedStyles = append(out.ComputedStyles, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot15(out *jwriter.Writer, in CaptureSnapshotParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"computedStyles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ComputedStyles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v101, v102 := range in.ComputedStyles {
				if v101 > 0 {
					out.RawByte(',')
				}
				out.String(string(v102))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CaptureSnapshotParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CaptureSnapshotParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoDomsnapshot15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CaptureSnapshotParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CaptureSnapshotParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot15(l, v)
}
